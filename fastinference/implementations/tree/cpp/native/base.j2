namespace {{namespace}} {

namespace {{model.name}} {
struct Node {
    {{int_type}} feature;
    {{feature_type}} split;
    bool left_is_leaf;
    bool right_is_leaf;
    {{int_type}} left;
    {{int_type}} right;
};

constexpr {{label_type}} predictions[{{leaf_nodes|length}}][{{model.n_classes}}] = { {% for n in leaf_nodes %}{{ n.prediction|replace('[', '{')|replace(']', '}') }}{% if not loop.last %}, {% endif %}{% endfor %} };
constexpr Node nodes[{{inner_nodes|length}}] = { {% for n in inner_nodes %}{ {{n.feature}}, {{n.split}}, {{n.left_is_leaf}}, {{n.right_is_leaf}}, {{n.leftChild.id}}, {{n.rightChild.id}}}{% if not loop.last %}, {% endif %}{% endfor %} };

}

void predict_{{model.name}}({{ feature_type }} const * const x, {{ label_type }} * pred) {
    {{int_type}} i = 0;
    {% if inner_nodes|length > 0%}
    while(true) {
        if (x[{{model.name}}::nodes[i].feature] <= {{model.name}}::nodes[i].split){
            if ({{model.name}}::nodes[i].left_is_leaf) {
                i = {{model.name}}::nodes[i].left;
                break;
            } else {
                i = {{model.name}}::nodes[i].left;
            }
        } else {
            if ({{model.name}}::nodes[i].right_is_leaf) {
                i = {{model.name}}::nodes[i].right;
                break;
            } else {
                i = {{model.name}}::nodes[i].right;
            }
        }
    }
    {%endif%}

    for (unsigned int j = 0; j < {{model.n_classes}}; ++j) {
        pred[j] += {% if weight != 1.0 %} {{model.name}}::predictions[i][j]*{{weight}}; {% else %} {{model.name}}::predictions[i][j]; {% endif %}

    }
}

}